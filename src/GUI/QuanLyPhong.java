/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package GUI;

import DAO.DichVuDao;
import DAO.LoaiPhongDAO;
import DAO.PhongDAO;
import Utils.msg;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import model.LoaiPhong;
import model.Phong;
import model.Dichvu;

/**
 *
 * @author
 */
public class QuanLyPhong extends javax.swing.JDialog {

    /**
     * Creates new form NewJDialog
     *
     * @param parent
     * @param modal
     */
    public QuanLyPhong(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        init();
    }
    public QuanLyPhong(java.awt.Frame parent, boolean modal, String id) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        init();
    }
    int selectedRowCount = 0;
    PhongDAO phongDAO = new PhongDAO();
    LoaiPhongDAO loaiPhongDAO = new LoaiPhongDAO();
    DichVuDao dichVuDAO = new DichVuDao();

    public void init() {
        fillTable();
        fillCBODV();
        fillCBOLP();
        fillCBOTT();
        numberOfRoom();
    }

    public void fillTable() {
        List<Phong> Phong_List = phongDAO.selectAll();
        getTableModelPhong(Phong_List);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myPanel1 = new design.MyPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPhong = new javax.swing.JTable();
        btnTongSoPhong = new design.MyButton();
        btnSoPhongTrong = new design.MyButton();
        btnSoPhongCoKhach = new design.MyButton();
        jPanel1 = new javax.swing.JPanel();
        txtGiaLP = new design.MyTextField();
        txtTongTien = new design.MyTextField();
        txtGiaDV = new design.MyTextField();
        txtTenPhong = new design.MyTextField();
        jLabel16 = new javax.swing.JLabel();
        cboTrangThai = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        cboDV = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        cboLP = new javax.swing.JComboBox<>();
        insertButton = new design.MyButton();
        updateButton = new design.MyButton();
        deleteButton = new design.MyButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        myPanel1.setPreferredSize(new java.awt.Dimension(960, 401));
        myPanel1.setTenAnh("abc.jpg");
        myPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Quản lý phòng");
        jLabel1.setPreferredSize(new java.awt.Dimension(94, 40));
        myPanel1.add(jLabel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        tblPhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Tên phòng", "Loại phòng", "Trạng thái", "Dịch vụ", "Tổng tiền"
            }
        ));
        tblPhong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblPhongMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblPhong);

        btnTongSoPhong.setText("Tổng số phòng:");
        btnTongSoPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTongSoPhongActionPerformed(evt);
            }
        });

        btnSoPhongTrong.setText("Số phòng trống:");
        btnSoPhongTrong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSoPhongTrongActionPerformed(evt);
            }
        });

        btnSoPhongCoKhach.setText("Số phòng có khách:");
        btnSoPhongCoKhach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSoPhongCoKhachActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnTongSoPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSoPhongTrong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSoPhongCoKhach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTongSoPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSoPhongTrong, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSoPhongCoKhach, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.add(jPanel3);

        txtGiaLP.setEditable(false);
        txtGiaLP.setText("0.0");

        txtTongTien.setEditable(false);

        txtGiaDV.setEditable(false);
        txtGiaDV.setText("0.0");

        jLabel16.setText("Tên phòng:");

        jLabel17.setText("Dịch vụ:");

        cboDV.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboDVItemStateChanged(evt);
            }
        });

        jLabel18.setText("Loại phòng:");

        jLabel19.setText("Trạng thái:");

        jLabel20.setText("Giá dịch vụ:");

        jLabel21.setText("Giá loại phòng:");

        jLabel22.setText("Tổng tiền:");

        cboLP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboLPItemStateChanged(evt);
            }
        });

        insertButton.setBackground(new java.awt.Color(192, 116, 152));
        insertButton.setBorder(null);
        insertButton.setForeground(new java.awt.Color(255, 255, 255));
        insertButton.setText("Thêm");
        insertButton.setToolTipText("");
        insertButton.setBorderColor(new java.awt.Color(255, 255, 255));
        insertButton.setBorderPainted(false);
        insertButton.setColor(new java.awt.Color(192, 116, 152));
        insertButton.setColorClick(new java.awt.Color(142, 79, 109));
        insertButton.setFocusable(false);
        insertButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        insertButton.setRadius(40);
        insertButton.setRequestFocusEnabled(false);
        insertButton.setRolloverEnabled(false);
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(192, 116, 152));
        updateButton.setBorder(null);
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("Cập nhật");
        updateButton.setToolTipText("");
        updateButton.setBorderColor(new java.awt.Color(255, 255, 255));
        updateButton.setBorderPainted(false);
        updateButton.setColor(new java.awt.Color(192, 116, 152));
        updateButton.setColorClick(new java.awt.Color(142, 79, 109));
        updateButton.setFocusable(false);
        updateButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        updateButton.setRadius(40);
        updateButton.setRequestFocusEnabled(false);
        updateButton.setRolloverEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(192, 116, 152));
        deleteButton.setBorder(null);
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("Xoá");
        deleteButton.setToolTipText("");
        deleteButton.setBorderColor(new java.awt.Color(255, 255, 255));
        deleteButton.setBorderPainted(false);
        deleteButton.setColor(new java.awt.Color(192, 116, 152));
        deleteButton.setColorClick(new java.awt.Color(142, 79, 109));
        deleteButton.setFocusable(false);
        deleteButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deleteButton.setRadius(40);
        deleteButton.setRequestFocusEnabled(false);
        deleteButton.setRolloverEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTenPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 223, Short.MAX_VALUE)
                                .addComponent(jLabel19))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel17))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(cboDV, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel20))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(cboLP, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel21)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtGiaLP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtGiaDV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(insertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtTenPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel17)
                    .addComponent(txtGiaDV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboDV, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel21)
                    .addComponent(txtGiaLP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboLP, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        jPanel2.add(jPanel1);

        myPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(myPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblPhongMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPhongMousePressed
        selectedRowCount = tblPhong.getSelectedRow();
        displaySelectedRow();
    }//GEN-LAST:event_tblPhongMousePressed

    private void btnTongSoPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTongSoPhongActionPerformed
        fillTable();
    }//GEN-LAST:event_btnTongSoPhongActionPerformed

    private void btnSoPhongTrongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSoPhongTrongActionPerformed
        searchEmptyRoom();
    }//GEN-LAST:event_btnSoPhongTrongActionPerformed

    private void btnSoPhongCoKhachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSoPhongCoKhachActionPerformed
        searchNONEmptyroom();
    }//GEN-LAST:event_btnSoPhongCoKhachActionPerformed

    private void cboDVItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboDVItemStateChanged
//        getGiaDV(cboDV.getSelectedItem().toString());
        setDVCost();
    }//GEN-LAST:event_cboDVItemStateChanged

    private void cboLPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboLPItemStateChanged
//        getGiaLP(cboLP.getSelectedItem().toString());
        setLPCost();
    }//GEN-LAST:event_cboLPItemStateChanged

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        insert();
    }//GEN-LAST:event_insertButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        update();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        delete();
    }//GEN-LAST:event_deleteButtonActionPerformed
    public void newButton() {
        txtTenPhong.setText("");
        cboTrangThai.setSelectedIndex(-1);
        cboDV.setSelectedIndex(-1);
        cboLP.setSelectedIndex(-1);
        txtGiaDV.setText("0.0");
        txtGiaLP.setText("0.0");
        txtTongTien.setText("0.0");
    }

    public void searchNONEmptyroom() {
        List<Phong> list = phongDAO.selectByNONEmptyRoom();
        getTableModelPhong(list);
    }

    public void searchEmptyRoom() {
        List<Phong> list = phongDAO.selectByEmptyRoom();
        getTableModelPhong(list);
    }

    public void getTableModelPhong(List<Phong> list) {
        DefaultTableModel model = (DefaultTableModel) tblPhong.getModel();
        model.setRowCount(0);
        try {
            String trangthai;
            for (Phong p : list) {
                if (p.isTrangThai()) {
                    trangthai = "Trống";
                } else {
                    trangthai = "Có khách";
                }

                Object[] row = {
                    p.getMaPhong(),
                    p.getIdLP(),
                    trangthai,
                    p.getTenDV(),
                    p.getGiaPhong()
                };
                model.addRow(row);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            msg.alert(this, "Lỗi truy vấn dữ liệu!");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuanLyPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuanLyPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuanLyPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuanLyPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            QuanLyPhong dialog = new QuanLyPhong(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private design.MyButton btnSoPhongCoKhach;
    private design.MyButton btnSoPhongTrong;
    private design.MyButton btnTongSoPhong;
    private javax.swing.JComboBox<String> cboDV;
    private javax.swing.JComboBox<String> cboLP;
    private javax.swing.JComboBox<String> cboTrangThai;
    private design.MyButton deleteButton;
    private design.MyButton insertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private design.MyPanel myPanel1;
    private javax.swing.JTable tblPhong;
    private design.MyTextField txtGiaDV;
    private design.MyTextField txtGiaLP;
    private design.MyTextField txtTenPhong;
    private design.MyTextField txtTongTien;
    private design.MyButton updateButton;
    // End of variables declaration//GEN-END:variables

    private void fillCBODV() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboDV.getModel();
        model.setSelectedItem("Chọn dịch vụ");
        try {
            List<Dichvu> DichVu_List = dichVuDAO.selectAll();
            for (Dichvu lp : DichVu_List) {
                model.addElement(lp.getTen());
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            msg.alert(this, "Lỗi truy vấn dữ liệu!");
        }

    }

    private void fillCBOLP() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboLP.getModel();
        model.setSelectedItem("Chọn loại phòng");
        try {
            List<LoaiPhong> LoaiPhong_List = loaiPhongDAO.selectAll();
            for (LoaiPhong lp : LoaiPhong_List) {
                model.addElement(lp.getIdLP());
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            msg.alert(this, "Lỗi truy vấn dữ liệu!");
        }

    }

    private float getGiaLP(String idLP) {
        try {
            List<LoaiPhong> LoaiPhong_List = loaiPhongDAO.selectAll();
            for (LoaiPhong lp : LoaiPhong_List) {
                if (lp.getIdLP().equals(idLP)) {
                    return lp.getGia();
                }
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            msg.alert(this, "Lỗi truy vấn dữ liệu!");
            return -1;
        }
        return 0;
    }

    private float getGiaDV(String tenDV) {
        if (tenDV == null) {
            return (float) 0.0;
        }
        try {
            List<Dichvu> DichVu_List = dichVuDAO.selectAll();
            for (Dichvu dv : DichVu_List) {
                if (dv.getTen().equals(tenDV)) {
                    return (float) dv.getGia();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            msg.alert(this, "Lỗi truy vấn dữ liệu!");
            return -1;
        }
        return 0;
    }

    private float getTongTien() {
        try {
            float gialp = getGiaLP(cboLP.getSelectedItem().toString());
            float giadv = (float) getGiaDV(cboDV.getSelectedItem().toString());
            return giadv + gialp;
        } catch (Exception e) {
            return 0;
        }
    }

    private void fillCBOTT() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTrangThai.getModel();
        model.setSelectedItem("Chọn trạng thái");
        model.addElement("Trống");
        model.addElement("Có khách");
    }

    private void numberOfRoom() {
//        System.out.println("All Room: " + phongDAO.countAllRoom());
//        System.out.println("Empty Room: " + phongDAO.countEmptyRoom());
//        System.out.println("NON Empty Room: " + phongDAO.countNONEmptyRoom());
        btnTongSoPhong.setText("Tổng số phòng: " + phongDAO.countAllRoom());
        btnSoPhongTrong.setText("Số phòng trống: " + phongDAO.countEmptyRoom());
        btnSoPhongCoKhach.setText("Số phòng có khách: " + phongDAO.countNONEmptyRoom());
    }

    private void displaySelectedRow() {
        System.out.println("Selected Row: " + selectedRowCount);
        tblPhong.setRowSelectionInterval(selectedRowCount, selectedRowCount);
        txtTenPhong.setText(tblPhong.getValueAt(selectedRowCount, 0).toString());
        cboTrangThai.setSelectedItem(tblPhong.getValueAt(selectedRowCount, 2).toString());
        cboDV.setSelectedItem(tblPhong.getValueAt(selectedRowCount, 3).toString());
        cboLP.setSelectedItem(tblPhong.getValueAt(selectedRowCount, 1).toString());
        txtTongTien.setText(tblPhong.getValueAt(selectedRowCount, 4).toString());

        float gialp = getGiaLP(cboLP.getSelectedItem().toString());
        float giadv = (float) getGiaDV(cboDV.getSelectedItem().toString());

        txtGiaLP.setText(String.valueOf(gialp));
        txtGiaDV.setText(String.valueOf(giadv));
    }

    private Phong getPhong() {
        Phong phong = new Phong();
        phong.setMaPhong(txtTenPhong.getText());
        phong.setIdLP(cboLP.getSelectedItem().toString());

        if (cboTrangThai.getSelectedItem().equals("Trống")) {
            phong.setTrangThai(true);
        } else {
            phong.setTrangThai(false);
        }

        phong.setTenDV(cboDV.getSelectedItem().toString());

        phong.setGiaPhong(getTongTien());

        return phong;
    }

    private void insert() {
        try {
            phongDAO.insert(getPhong());
            msg.alert(this, "Added!");
            numberOfRoom();
            fillTable();
        } catch (Exception e) {
            msg.alert(this, "Fail Add!");
            System.out.println(e.getMessage());
        }
    }

    private void update() {
        try {
            phongDAO.update(getPhong());
            msg.alert(this, "Updated!");
            numberOfRoom();
            fillTable();
        } catch (Exception e) {
            msg.alert(this, "Fail Update!");
            System.out.println(e.getMessage());
        }
    }

    private void delete() {
        try {
            phongDAO.delete(txtTenPhong.getText());
            msg.alert(this, "Deleted!");
            numberOfRoom();
            fillTable();
        } catch (Exception e) {
            msg.alert(this, "Fail Delete!");
            System.out.println(e.getMessage());
        }
    }

    private void setDVCost() {
        txtGiaDV.setText(String.valueOf(getGiaDV(cboDV.getSelectedItem().toString())));
        txtTongTien.setText(String.valueOf(getTongTien()));
    }

    private void setLPCost() {
        txtGiaLP.setText(String.valueOf(getGiaLP(cboLP.getSelectedItem().toString())));
        txtTongTien.setText(String.valueOf(getTongTien()));
    }

}
